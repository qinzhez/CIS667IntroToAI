#0Y_ #0Y |CHARSET|::|UTF-8|
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP|::|WITH-SIMPLE-RESTART|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP|::|WITH-SIMPLE-RESTART|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP|::|WITH-SIMPLE-RESTART|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Like PROGN, except provides control over restarts if there is an error."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|RESTART|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|BODY| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|IGNORE| |COMMON-LISP|::|RESTART|))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|WITH-SIMPLE-RESTART|
       `(|COMMON-LISP|::|PROGN| ,@|COMMON-LISP-USER|::|BODY|))))))
  '(|COMMON-LISP|::|RESTART| |COMMON-LISP|::|&REST|
    |COMMON-LISP-USER|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP|::|DESTRUCTURING-BIND|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP|::|DESTRUCTURING-BIND|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP|::|DESTRUCTURING-BIND|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Bind the variables in lambda-list to the result list and execute body."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|LAMBDA-LIST|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|BODY| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|DESTRUCTURING-BIND|
       (|COMMON-LISP|::|COND|
        ((|COMMON-LISP|::|NULL| |COMMON-LISP-USER|::|LAMBDA-LIST|)
         `(|COMMON-LISP|::|PROGN| ,@|COMMON-LISP-USER|::|BODY|))
        ((|COMMON-LISP|::|NOT|
          (|COMMON-LISP|::|SYMBOLP| |COMMON-LISP|::|LIST|))
         (|COMMON-LISP|::|LET|
          ((|COMMON-LISP-USER|::|VAR| (|COMMON-LISP|::|GENSYM|)))
          `(|COMMON-LISP|::|LET|
            ((,|COMMON-LISP-USER|::|VAR| ,|COMMON-LISP|::|LIST|))
            (|COMMON-LISP|::|DESTRUCTURING-BIND|
             ,|COMMON-LISP-USER|::|LAMBDA-LIST| ,|COMMON-LISP-USER|::|VAR|
             ,@|COMMON-LISP-USER|::|BODY|))))
        ((|COMMON-LISP|::|SYMBOLP| |COMMON-LISP-USER|::|LAMBDA-LIST|)
         `(|COMMON-LISP|::|LET|
           ((,|COMMON-LISP-USER|::|LAMBDA-LIST| ,|COMMON-LISP|::|LIST|))
           ,@|COMMON-LISP-USER|::|BODY|))
        ((|COMMON-LISP|::|ATOM| |COMMON-LISP-USER|::|LAMBDA-LIST|)
         (|COMMON-LISP|::|ERROR| "Can't bind ~A to a value."
          |COMMON-LISP-USER|::|LAMBDA-LIST|))
        ((|COMMON-LISP|::|MEMBER|
          (|COMMON-LISP|::|FIRST| |COMMON-LISP-USER|::|LAMBDA-LIST|)
          '(|COMMON-LISP|::|&REST| |COMMON-LISP|::|&OPTIONAL|
            |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&AUX|))
         `(|COMMON-LISP|::|APPLY|
           #'(|COMMON-LISP|::|LAMBDA| ,|COMMON-LISP-USER|::|LAMBDA-LIST|
              ,@|COMMON-LISP-USER|::|BODY|)
           ,|COMMON-LISP|::|LIST|))
        (|COMMON-LISP|::|T|
         `(|COMMON-LISP|::|DESTRUCTURING-BIND|
           ,(|COMMON-LISP|::|FIRST| |COMMON-LISP-USER|::|LAMBDA-LIST|)
           (|COMMON-LISP|::|FIRST| ,|COMMON-LISP|::|LIST|)
           (|COMMON-LISP|::|DESTRUCTURING-BIND|
            ,(|COMMON-LISP|::|REST| |COMMON-LISP-USER|::|LAMBDA-LIST|)
            (|COMMON-LISP|::|REST| ,|COMMON-LISP|::|LIST|)
            ,@|COMMON-LISP-USER|::|BODY|)))))))))
  '(|COMMON-LISP-USER|::|LAMBDA-LIST| |COMMON-LISP|::|LIST|
    |COMMON-LISP|::|&BODY| |COMMON-LISP-USER|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|DEFSTRUCTURE|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|DEFSTRUCTURE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|DEFSTRUCTURE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "This is just like DEFSTRUCT, except it keeps track of :include types, for\n
  the benefit of METHOD-FOR, and it makes printing go through PRINT-STRUCTURE."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|TYPE-AND-ARGS|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|SLOTS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|DEFSTRUCTURE|
       (|COMMON-LISP|::|IF|
        (|COMMON-LISP|::|ATOM| |COMMON-LISP-USER|::|TYPE-AND-ARGS|)
        (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|TYPE-AND-ARGS|
         (|COMMON-LISP|::|LIST| |COMMON-LISP-USER|::|TYPE-AND-ARGS|)))
       (|COMMON-LISP|::|LET*|
        ((|COMMON-LISP|::|TYPE|
          (|COMMON-LISP|::|FIRST| |COMMON-LISP-USER|::|TYPE-AND-ARGS|))
         (|COMMON-LISP-USER|::|ARGS|
          (|COMMON-LISP|::|REST| |COMMON-LISP-USER|::|TYPE-AND-ARGS|))
         (|COMMON-LISP-USER|::|SUPERTYPE|
          (|COMMON-LISP|::|OR|
           (|COMMON-LISP|::|SECOND|
            (|COMMON-LISP|::|ASSOC| ':|INCLUDE| |COMMON-LISP-USER|::|ARGS|))
           '|COMMON-LISP|::|STRUCTURE|))
         (|COMMON-LISP-USER|::|PRINT-FN|
          (|COMMON-LISP|::|IF|
           (|COMMON-LISP|::|NULL|
            (|COMMON-LISP|::|ASSOC| ':|PRINT-FUNCTION|
             |COMMON-LISP-USER|::|ARGS|))
           '((:|PRINT-FUNCTION|
              (|COMMON-LISP|::|LAMBDA|
               (|COMMON-LISP-USER|::|X| |COMMON-LISP-USER|::|S|
                |COMMON-LISP-USER|::|D|)
               (|COMMON-LISP|::|DECLARE|
                (|COMMON-LISP|::|IGNORE| |COMMON-LISP-USER|::|D|))
               (|COMMON-LISP-USER|::|PRINT-STRUCTURE| |COMMON-LISP-USER|::|X|
                |COMMON-LISP-USER|::|S|)))))))
        `(|COMMON-LISP|::|PROGN|
          (|COMMON-LISP|::|SETF|
           (|COMMON-LISP|::|GET| ',|COMMON-LISP|::|TYPE| ':|SUPERTYPE|)
           ',|COMMON-LISP-USER|::|SUPERTYPE|)
          (|COMMON-LISP|::|DEFSTRUCT|
           (,|COMMON-LISP|::|TYPE| ,@|COMMON-LISP-USER|::|PRINT-FN|
            ,@|COMMON-LISP-USER|::|ARGS|)
           ,@|COMMON-LISP-USER|::|SLOTS|))))))))
  '(|COMMON-LISP-USER|::|TYPE-AND-ARGS| |COMMON-LISP|::|&REST|
    |COMMON-LISP-USER|::|SLOTS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|PRINT-STRUCTURE|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
