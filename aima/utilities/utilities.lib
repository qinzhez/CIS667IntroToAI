#0Y_ #0Y |CHARSET|::|UTF-8|
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|WHILE|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|WHILE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|WHILE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Execute body while the test is true."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|TEST|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP|::|DO| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|BODY| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|WHILE|
       (|COMMON-LISP|::|ASSERT|
        (|COMMON-LISP|::|EQ| |COMMON-LISP|::|DO| '|COMMON-LISP|::|DO|))
       `(|COMMON-LISP|::|DO| |COMMON-LISP|::|NIL|
         ((|COMMON-LISP|::|NOT| ,|COMMON-LISP-USER|::|TEST|)
          |COMMON-LISP|::|NIL|)
         ,@|COMMON-LISP-USER|::|BODY|))))))
  '(|COMMON-LISP-USER|::|TEST| |COMMON-LISP|::|DO| |COMMON-LISP|::|&BODY|
    |COMMON-LISP-USER|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|FOR-EACH|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|FOR-EACH|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|FOR-EACH|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Execute body for each element of list.  VAR can be a list or tree\n
  of variables, in which case the elements are destructured."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 5. 5.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|VAR|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|IN| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|CADDDR| . #1#))
       (|COMMON-LISP|::|DO| (|COMMON-LISP|::|FIFTH| . #1#))
       (|COMMON-LISP-USER|::|BODY|
        (|COMMON-LISP|::|CDR| (|COMMON-LISP|::|CDDDDR| . #1#))))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|FOR-EACH|
       (|COMMON-LISP|::|ASSERT|
        (|COMMON-LISP|::|EQ| |COMMON-LISP-USER|::|IN|
         '|COMMON-LISP-USER|::|IN|))
       (|COMMON-LISP|::|ASSERT|
        (|COMMON-LISP|::|EQ| |COMMON-LISP|::|DO| '|COMMON-LISP|::|DO|))
       (|COMMON-LISP|::|TYPECASE| |COMMON-LISP-USER|::|VAR|
        (|COMMON-LISP|::|SYMBOL|
         `(|COMMON-LISP|::|DOLIST|
           (,|COMMON-LISP-USER|::|VAR| ,|COMMON-LISP|::|LIST|)
           ,@|COMMON-LISP-USER|::|BODY|))
        (|COMMON-LISP|::|CONS|
         (|COMMON-LISP|::|LET|
          ((|COMMON-LISP-USER|::|LIST-VAR| (|COMMON-LISP|::|GENSYM|)))
          `(|COMMON-LISP|::|DOLIST|
            (,|COMMON-LISP-USER|::|LIST-VAR| ,|COMMON-LISP|::|LIST|)
            (|COMMON-LISP|::|DESTRUCTURING-BIND| ,|COMMON-LISP-USER|::|VAR|
             ,|COMMON-LISP-USER|::|LIST-VAR| ,@|COMMON-LISP-USER|::|BODY|))))
        (|COMMON-LISP|::|T|
         (|COMMON-LISP|::|ERROR|
          "~V is an illegal variable in (for each ~V in ~A ...)"
          |COMMON-LISP-USER|::|VAR| |COMMON-LISP|::|LIST|))))))))
  '(|COMMON-LISP-USER|::|VAR| |COMMON-LISP-USER|::|IN| |COMMON-LISP|::|LIST|
    |COMMON-LISP|::|DO| |COMMON-LISP|::|&BODY| |COMMON-LISP-USER|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|FOR|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|FOR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|FOR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Execute body with var bound to succesive integers."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 7. 7.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|VAR|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP|::|=| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|START| (|COMMON-LISP|::|CADDDR| . #1#))
       (|COMMON-LISP-USER|::|TO| (|COMMON-LISP|::|FIFTH| . #1#))
       (|COMMON-LISP-USER|::|END|
        (|COMMON-LISP|::|CADR| . #2=((|COMMON-LISP|::|CDDDDR| . #1#))))
       (|COMMON-LISP|::|DO| (|COMMON-LISP|::|CADDR| . #2#))
       (|COMMON-LISP-USER|::|BODY| (|COMMON-LISP|::|CDDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|FOR|
       (|COMMON-LISP|::|COND|
        ((|COMMON-LISP|::|EQ| |COMMON-LISP-USER|::|VAR|
          '|COMMON-LISP-USER|::|EACH|)
         `(|COMMON-LISP-USER|::|FOR-EACH| ,|COMMON-LISP|::|=|
           ,|COMMON-LISP-USER|::|START| ,|COMMON-LISP-USER|::|TO|
           ,|COMMON-LISP-USER|::|END| ,|COMMON-LISP|::|DO|
           ,@|COMMON-LISP-USER|::|BODY|))
        (|COMMON-LISP|::|T|
         (|COMMON-LISP|::|ASSERT|
          (|COMMON-LISP|::|EQ| |COMMON-LISP|::|=| '|COMMON-LISP|::|=|))
         (|COMMON-LISP|::|ASSERT|
          (|COMMON-LISP|::|EQ| |COMMON-LISP-USER|::|TO|
           '|COMMON-LISP-USER|::|TO|))
         (|COMMON-LISP|::|ASSERT|
          (|COMMON-LISP|::|EQ| |COMMON-LISP|::|DO| '|COMMON-LISP|::|DO|))
         (|COMMON-LISP|::|LET|
          ((|COMMON-LISP-USER|::|END-VAR| (|COMMON-LISP|::|GENSYM| "END")))
          `(|COMMON-LISP|::|DO|
            ((,|COMMON-LISP-USER|::|VAR| ,|COMMON-LISP-USER|::|START|
              (|COMMON-LISP|::|+| 1. ,|COMMON-LISP-USER|::|VAR|))
             (,|COMMON-LISP-USER|::|END-VAR| ,|COMMON-LISP-USER|::|END|))
            ((|COMMON-LISP|::|>| ,|COMMON-LISP-USER|::|VAR|
              ,|COMMON-LISP-USER|::|END-VAR|)
             |COMMON-LISP|::|NIL|)
            ,@|COMMON-LISP-USER|::|BODY|)))))))))
  '(|COMMON-LISP-USER|::|VAR| |COMMON-LISP|::|=| |COMMON-LISP-USER|::|START|
    |COMMON-LISP-USER|::|TO| |COMMON-LISP-USER|::|END| |COMMON-LISP|::|DO|
    |COMMON-LISP|::|&BODY| |COMMON-LISP-USER|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|DELETEF|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|DELETEF|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|DELETEF|
   (|COMMON-LISP|::|LAMBDA|
    (|SYSTEM|::|<MACRO-FORM>| |COMMON-LISP-USER|::|ENV|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    "Destructively delete item from sequence, which must be SETF-able."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|ITEM|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP|::|SEQUENCE| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP-USER|::|KEYS| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|DELETEF|
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|COMMON-LISP-USER|::|TEMPS| |COMMON-LISP-USER|::|VALS|
         |COMMON-LISP-USER|::|STORES| |COMMON-LISP-USER|::|STORE-FORM|
         |COMMON-LISP-USER|::|ACCESS-FORM|)
        (|COMMON-LISP|::|GET-SETF-EXPANSION| |COMMON-LISP|::|SEQUENCE|
         |COMMON-LISP-USER|::|ENV|)
        (|COMMON-LISP|::|ASSERT|
         (|COMMON-LISP|::|=|
          (|COMMON-LISP|::|LENGTH| |COMMON-LISP-USER|::|STORES|) 1.))
        (|COMMON-LISP|::|LET|
         ((|COMMON-LISP-USER|::|ITEM-VAR| (|COMMON-LISP|::|GENSYM| "ITEM")))
         `(|COMMON-LISP|::|LET*|
           ((,|COMMON-LISP-USER|::|ITEM-VAR| ,|COMMON-LISP-USER|::|ITEM|)
            ,@(|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|LIST|
               |COMMON-LISP-USER|::|TEMPS| |COMMON-LISP-USER|::|VALS|)
            (,(|COMMON-LISP|::|FIRST| |COMMON-LISP-USER|::|STORES|)
             (|COMMON-LISP|::|DELETE| ,|COMMON-LISP-USER|::|ITEM-VAR|
              ,|COMMON-LISP-USER|::|ACCESS-FORM|
              ,@|COMMON-LISP-USER|::|KEYS|)))
           ,|COMMON-LISP-USER|::|STORE-FORM|))))))))
  '(|COMMON-LISP-USER|::|ITEM| |COMMON-LISP|::|SEQUENCE| |COMMON-LISP|::|&REST|
    |COMMON-LISP-USER|::|KEYS| |COMMON-LISP|::|&ENVIRONMENT|
    |COMMON-LISP-USER|::|ENV|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|DEFINE-IF-UNDEFINED|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|DEFINE-IF-UNDEFINED|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|DEFINE-IF-UNDEFINED|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Use this to conditionally define functions, variables, or macros that\n
  may or may not be pre-defined in this Lisp.  This can be used to provide\n
  CLtL2 compatibility for older Lisps."
    (|COMMON-LISP|::|LET*|
     ((|COMMON-LISP-USER|::|DEFINITIONS|
       (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|DEFINE-IF-UNDEFINED|
      `(|COMMON-LISP|::|PROGN|
        ,@(|COMMON-LISP|::|MAPCAR|
           #'(|COMMON-LISP|::|LAMBDA| (|COMMON-LISP-USER|::|DEF|)
              (|COMMON-LISP|::|LET|
               ((|COMMON-LISP-USER|::|NAME|
                 (|COMMON-LISP|::|SECOND| |COMMON-LISP-USER|::|DEF|)))
               `(|COMMON-LISP|::|WHEN|
                 (|COMMON-LISP|::|NOT|
                  (|COMMON-LISP|::|OR|
                   (|COMMON-LISP|::|BOUNDP| ',|COMMON-LISP-USER|::|NAME|)
                   (|COMMON-LISP|::|FBOUNDP| ',|COMMON-LISP-USER|::|NAME|)
                   (|EXT|::|SPECIAL-FORM-P| ',|COMMON-LISP-USER|::|NAME|)
                   (|COMMON-LISP|::|MACRO-FUNCTION|
                    ',|COMMON-LISP-USER|::|NAME|)))
                 ,|COMMON-LISP-USER|::|DEF|)))
           |COMMON-LISP-USER|::|DEFINITIONS|))))))
  '(|COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|DEFINITIONS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|LENGTH>1|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|LENGTH=1|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|RANDOM-ELEMENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|MAPPEND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|FN| |COMMON-LISP|::|&REST|
    |COMMON-LISP-USER|::|LISTS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|STARTS-WITH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|LIST| |COMMON-LISP-USER|::|ELEMENT|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|LAST1|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|LEFT-ROTATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|RIGHT-ROTATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|TRANSPOSE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP-USER|::|LIST-OF-LISTS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|REUSE-CONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|X| |COMMON-LISP-USER|::|Y|
    |COMMON-LISP-USER|::|X-Y|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|MAKE-EXP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|OP| |COMMON-LISP|::|&REST|
    |COMMON-LISP-USER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|OP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|EXP|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|ARGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|EXP|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|ARG1|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|EXP|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|ARG2|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|EXP|)))
(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|REMPROP| '|COMMON-LISP-USER|::|ARGS|
  '|SYSTEM|::|DEFSTRUCT-WRITER|)
 (|SYSTEM|::|CHECK-REDEFINITION| '|COMMON-LISP-USER|::|ARGS|
  '|COMMON-LISP|::|DEFSETF|
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|GET| '|COMMON-LISP-USER|::|ARGS|
    '|SYSTEM|::|SETF-EXPANDER|)
   (|SYSTEM|::|TEXT| "SETF expander")))
 (|SYSTEM|::|%PUT| '|COMMON-LISP-USER|::|ARGS| '|SYSTEM|::|SETF-EXPANDER|
  (|COMMON-LISP|::|LIST*| -1. 1.
   (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|SETF-ARGS|
    (|COMMON-LISP|::|LAMBDA|
     (#1=#:|IG5998| |COMMON-LISP-USER|::|NEW-VALUE| |COMMON-LISP|::|EXP|)
     (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| #1#))
     (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|ARGS|
      `(|COMMON-LISP|::|SETF| (|COMMON-LISP|::|CDR| ,|COMMON-LISP|::|EXP|)
        ,|COMMON-LISP-USER|::|NEW-VALUE|))))))
 (|SYSTEM|::|%SET-DOCUMENTATION| '|COMMON-LISP-USER|::|ARGS|
  '|COMMON-LISP|::|SETF| |COMMON-LISP|::|NIL|)
 '|COMMON-LISP-USER|::|ARGS|)
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|PREFIX->INFIX|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|EXP|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|INSERT-BETWEEN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|ITEM| |COMMON-LISP|::|LIST|)))
(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|LET|
  ((#:|G6031|
    (|COMMON-LISP|::|CONS| '|COMMON-LISP-USER|::|XY|
     (|CLOS|::|CLASS-NAMES|
      (|COMMON-LISP|::|GET| '|COMMON-LISP|::|STRUCTURE-OBJECT|
       '|CLOS|::|CLOSCLASS|)))))
  (|SYSTEM|::|STRUCTURE-UNDEFINE-ACCESSORIES| '|COMMON-LISP-USER|::|XY|)
  (|SYSTEM|::|%PUT| '|COMMON-LISP-USER|::|XY|
   '|SYSTEM|::|DEFSTRUCT-DESCRIPTION|
   (|COMMON-LISP|::|VECTOR| '|COMMON-LISP|::|LIST| 2.
    '|COMMON-LISP-USER|::|MAKE-XY|
    (|COMMON-LISP|::|LIST|
     (|CLOS|::|MAKE-INSTANCE-<STRUCTURE-EFFECTIVE-SLOT-DEFINITION>|
      |CLOS|::|<STRUCTURE-EFFECTIVE-SLOT-DEFINITION>| :|NAME|
      '|COMMON-LISP-USER|::|X| :|INITARGS| '#1=(:|X|) :|TYPE|
      '|COMMON-LISP|::|T| :|ALLOCATION| ':|INSTANCE|
      #2='|CLOS|::|INHERITABLE-INITER|
      (|CLOS|::|MAKE-INHERITABLE-SLOT-DEFINITION-INITER| '|COMMON-LISP|::|NIL|
       #3=(|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
      #4='|CLOS|::|INHERITABLE-DOC| '(|COMMON-LISP|::|NIL|)
      #5='|CLOS|::|LOCATION| '0. #6='|CLOS|::|READONLY| '|COMMON-LISP|::|NIL|)
     (|CLOS|::|MAKE-INSTANCE-<STRUCTURE-EFFECTIVE-SLOT-DEFINITION>|
      |CLOS|::|<STRUCTURE-EFFECTIVE-SLOT-DEFINITION>| :|NAME|
      '|COMMON-LISP-USER|::|Y| :|INITARGS| '#7=(:|Y|) :|TYPE|
      '|COMMON-LISP|::|T| :|ALLOCATION| ':|INSTANCE| #2#
      (|CLOS|::|MAKE-INHERITABLE-SLOT-DEFINITION-INITER| '|COMMON-LISP|::|NIL|
       #8=(|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
      #4# '(|COMMON-LISP|::|NIL|) #5# '1. #6# '|COMMON-LISP|::|NIL|))
    (|COMMON-LISP|::|LIST|
     (|CLOS|::|MAKE-INSTANCE-<STRUCTURE-DIRECT-SLOT-DEFINITION>|
      |CLOS|::|<STRUCTURE-DIRECT-SLOT-DEFINITION>| :|NAME|
      '|COMMON-LISP-USER|::|X| :|INITARGS| '#1# :|TYPE| '|COMMON-LISP|::|T|
      :|ALLOCATION| ':|INSTANCE| #9='|CLOS|::|INHERITABLE-INITER|
      (|CLOS|::|MAKE-INHERITABLE-SLOT-DEFINITION-INITER| '|COMMON-LISP|::|NIL|
       #3#)
      #10='|CLOS|::|INHERITABLE-DOC| '(|COMMON-LISP|::|NIL|) :|READERS|
      '(|COMMON-LISP-USER|::|XY-X|) :|WRITERS|
      '((|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-X|)))
     (|CLOS|::|MAKE-INSTANCE-<STRUCTURE-DIRECT-SLOT-DEFINITION>|
      |CLOS|::|<STRUCTURE-DIRECT-SLOT-DEFINITION>| :|NAME|
      '|COMMON-LISP-USER|::|Y| :|INITARGS| '#7# :|TYPE| '|COMMON-LISP|::|T|
      :|ALLOCATION| ':|INSTANCE| #9#
      (|CLOS|::|MAKE-INHERITABLE-SLOT-DEFINITION-INITER| '|COMMON-LISP|::|NIL|
       #8#)
      #10# '(|COMMON-LISP|::|NIL|) :|READERS| '(|COMMON-LISP-USER|::|XY-Y|)
      :|WRITERS| '((|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-Y|))))
    '|COMMON-LISP|::|NIL| '|COMMON-LISP-USER|::|COPY-XY|
    '|COMMON-LISP|::|NIL|))
  (|CLOS|::|UNDEFINE-STRUCTURE-CLASS| '|COMMON-LISP-USER|::|XY|)
  (|COMMON-LISP|::|DEFUN| |COMMON-LISP-USER|::|MAKE-XY|
   (|COMMON-LISP|::|&KEY| (#11=#:|X| |COMMON-LISP|::|NIL|)
    (#12=#:|Y| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|THE| |COMMON-LISP|::|T| #11#)
    (|COMMON-LISP|::|THE| |COMMON-LISP|::|T| #12#))))
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|INLINE| |COMMON-LISP-USER|::|COPY-XY|))
 (|COMMON-LISP|::|DEFUN| |COMMON-LISP-USER|::|COPY-XY|
  (|COMMON-LISP|::|STRUCTURE|)
  (|COMMON-LISP|::|COPY-LIST| |COMMON-LISP|::|STRUCTURE|))
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|XY-X|
    (|COMMON-LISP-USER|::|XY|) |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|INLINE| |COMMON-LISP-USER|::|XY-X|))
 (|COMMON-LISP|::|DEFUN| |COMMON-LISP-USER|::|XY-X| #13=(|SYSTEM|::|OBJECT|)
  (|COMMON-LISP|::|THE| |COMMON-LISP|::|T|
   (|COMMON-LISP|::|NTH| 0. . #14=(|SYSTEM|::|OBJECT|))))
 (|SYSTEM|::|%PUT| '|COMMON-LISP-USER|::|XY-X|
  #15='|SYSTEM|::|DEFSTRUCT-READER| '|COMMON-LISP-USER|::|XY|)
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|XY-Y|
    (|COMMON-LISP-USER|::|XY|) |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|INLINE| |COMMON-LISP-USER|::|XY-Y|))
 (|COMMON-LISP|::|DEFUN| |COMMON-LISP-USER|::|XY-Y| #13#
  (|COMMON-LISP|::|THE| |COMMON-LISP|::|T| (|COMMON-LISP|::|NTH| 1. . #14#)))
 (|SYSTEM|::|%PUT| '|COMMON-LISP-USER|::|XY-Y| #15# '|COMMON-LISP-USER|::|XY|)
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|FUNCTION|
    (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-X|)
    (|COMMON-LISP|::|T| |COMMON-LISP-USER|::|XY|) |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|INLINE|
    (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-X|)))
 (|COMMON-LISP|::|DEFUN| (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-X|)
  #16=(|SYSTEM|::|VALUE| |SYSTEM|::|OBJECT|)
  (|COMMON-LISP|::|SETF| (|COMMON-LISP|::|NTH| 0. . #17=(|SYSTEM|::|OBJECT|)) .
   #18=(|SYSTEM|::|VALUE|)))
 (|SYSTEM|::|%PUT| '|COMMON-LISP-USER|::|XY-X|
  #19='|SYSTEM|::|DEFSTRUCT-WRITER| '|COMMON-LISP-USER|::|XY|)
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|FUNCTION|
    (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-Y|)
    (|COMMON-LISP|::|T| |COMMON-LISP-USER|::|XY|) |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|PROCLAIM|
  '(|COMMON-LISP|::|INLINE|
    (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-Y|)))
 (|COMMON-LISP|::|DEFUN| (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-Y|)
  #16# (|COMMON-LISP|::|SETF| (|COMMON-LISP|::|NTH| 1. . #17#) . #18#))
 (|SYSTEM|::|%PUT| '|COMMON-LISP-USER|::|XY-Y| #19# '|COMMON-LISP-USER|::|XY|)
 (|SYSTEM|::|%SET-DOCUMENTATION| '|COMMON-LISP-USER|::|XY|
  '|COMMON-LISP|::|TYPE| "A two-dimensional (i.e. x and y) point.")
 '|COMMON-LISP-USER|::|XY|)
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|MAKE-XY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (#:|X| |COMMON-LISP|::|NIL|)
    (#:|Y| |COMMON-LISP|::|NIL|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |COMMON-LISP-USER|::|COPY-XY|))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|COPY-XY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '#1=(|COMMON-LISP|::|STRUCTURE|))
 '(#1#
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN| |COMMON-LISP-USER|::|COPY-XY|))
   (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|COPY-XY|
    (|COMMON-LISP|::|COPY-LIST| |COMMON-LISP|::|STRUCTURE|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|XY-X|
   (|COMMON-LISP-USER|::|XY|) |COMMON-LISP|::|T|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|INLINE| |COMMON-LISP-USER|::|XY-X|))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|XY-X|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '#1=(|SYSTEM|::|OBJECT|))
 '(#1#
   (|COMMON-LISP|::|DECLARE| (|SYSTEM|::|IN-DEFUN| |COMMON-LISP-USER|::|XY-X|))
   (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|XY-X|
    (|COMMON-LISP|::|THE| |COMMON-LISP|::|T|
     (|COMMON-LISP|::|NTH| 0. |SYSTEM|::|OBJECT|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|XY-Y|
   (|COMMON-LISP-USER|::|XY|) |COMMON-LISP|::|T|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|INLINE| |COMMON-LISP-USER|::|XY-Y|))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|XY-Y|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '#1=(|SYSTEM|::|OBJECT|))
 '(#1#
   (|COMMON-LISP|::|DECLARE| (|SYSTEM|::|IN-DEFUN| |COMMON-LISP-USER|::|XY-Y|))
   (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|XY-Y|
    (|COMMON-LISP|::|THE| |COMMON-LISP|::|T|
     (|COMMON-LISP|::|NTH| 1. |SYSTEM|::|OBJECT|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FUNCTION| (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-X|)
   (|COMMON-LISP|::|T| |COMMON-LISP-USER|::|XY|) |COMMON-LISP|::|T|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-X|)))
(|SYSTEM|::|C-DEFUN| '#1=(|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-X|)
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#2=(|SYSTEM|::|VALUE| |SYSTEM|::|OBJECT|))
 '(#2# (|COMMON-LISP|::|DECLARE| (|SYSTEM|::|IN-DEFUN| #1#))
   (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|XY-X|
    (|COMMON-LISP|::|SETF| (|COMMON-LISP|::|NTH| 0. |SYSTEM|::|OBJECT|)
     |SYSTEM|::|VALUE|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FUNCTION| (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-Y|)
   (|COMMON-LISP|::|T| |COMMON-LISP-USER|::|XY|) |COMMON-LISP|::|T|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| (|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-Y|)))
(|SYSTEM|::|C-DEFUN| '#1=(|COMMON-LISP|::|SETF| |COMMON-LISP-USER|::|XY-Y|)
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#2=(|SYSTEM|::|VALUE| |SYSTEM|::|OBJECT|))
 '(#2# (|COMMON-LISP|::|DECLARE| (|SYSTEM|::|IN-DEFUN| #1#))
   (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|XY-Y|
    (|COMMON-LISP|::|SETF| (|COMMON-LISP|::|NTH| 1. |SYSTEM|::|OBJECT|)
     |SYSTEM|::|VALUE|))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|XY-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP-USER|::|ARG|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|@|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|X| |COMMON-LISP-USER|::|Y|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|XY-EQUAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|P| |COMMON-LISP-USER|::|Q|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|XY-ADD|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|P| |COMMON-LISP-USER|::|Q|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|XY-DISTANCE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|P| |COMMON-LISP-USER|::|Q|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|X+Y-DISTANCE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|P| |COMMON-LISP-USER|::|Q|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|XY-BETWEEN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|XY1| |COMMON-LISP-USER|::|XY2|
    |COMMON-LISP-USER|::|XY3|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|ROTATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|O| |COMMON-LISP-USER|::|A| |COMMON-LISP-USER|::|B|
    |COMMON-LISP-USER|::|C| |COMMON-LISP-USER|::|D|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|INSIDE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|L| |COMMON-LISP-USER|::|XMAX|
    |COMMON-LISP-USER|::|YMAX|)))
(|SYSTEM|::|C-PROCLAIM-CONSTANT| '|COMMON-LISP-USER|::|INFINITY|
 '|COMMON-LISP|::|MOST-POSITIVE-SINGLE-FLOAT|)
(|SYSTEM|::|C-PROCLAIM-CONSTANT| '|COMMON-LISP-USER|::|MINUS-INFINITY|
 '|COMMON-LISP|::|MOST-NEGATIVE-SINGLE-FLOAT|)
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|AVERAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP-USER|::|NUMBERS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|RUNNING-AVERAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|AVG| |COMMON-LISP-USER|::|NEW|
    |COMMON-LISP-USER|::|N|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|SQUARE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP-USER|::|X|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|SUM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|NUMBERS| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP-USER|::|KEY| #'|COMMON-LISP|::|IDENTITY|))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|BETWEEN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|X| |COMMON-LISP-USER|::|Y| |COMMON-LISP-USER|::|Z|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|RMS-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|PREDICTED| |COMMON-LISP-USER|::|TARGET|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|MS-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|PREDICTED| |COMMON-LISP-USER|::|TARGET|
    |COMMON-LISP|::|&AUX| (|COMMON-LISP-USER|::|SUM| 0.))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|BOOLEAN-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|PREDICTED| |COMMON-LISP-USER|::|TARGET|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|DOT-PRODUCT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|L1| |COMMON-LISP-USER|::|L2| |COMMON-LISP|::|&AUX|
    (|COMMON-LISP-USER|::|SUM| 0.))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|IOTA|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|N| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP-USER|::|START-AT| 0.))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|RANDOM-INTEGER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|FROM| |COMMON-LISP-USER|::|TO|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|NORMAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|X| |COMMON-LISP-USER|::|MU|
    |COMMON-LISP-USER|::|SIGMA|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|SAMPLE-WITH-REPLACEMENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|N| |COMMON-LISP-USER|::|POPULATION|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|SAMPLE-WITHOUT-REPLACEMENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|N| |COMMON-LISP-USER|::|POPULATION|
    |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP-USER|::|M|
     (|COMMON-LISP|::|LENGTH| |COMMON-LISP-USER|::|POPULATION|)))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|FUZZ|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|QUANTITY| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP-USER|::|PROPORTION| 0.1f0)
    (|COMMON-LISP-USER|::|ROUND-OFF| 0.01f0))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|ROUND-OFF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|NUMBER| |COMMON-LISP-USER|::|PRECISION|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|NOTHING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|DECLARE-IGNORE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|TRUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|FALSE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|REQUIRED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP-USER|::|MSG| "A required argument is missing.")
    |COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|STRINGIFY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|EXP|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|CONCAT-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|PRINT-GRID|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|ARRAY| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|T|)
    (|COMMON-LISP-USER|::|KEY| #'|COMMON-LISP|::|IDENTITY|)
    (|COMMON-LISP-USER|::|WIDTH| 3.))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|PRINT-CENTERED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP-USER|::|WIDTH|
    |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|PRINT-REPEATED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP-USER|::|N| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|PRINT-DASHES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|WIDTH| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|T|)
    |COMMON-LISP-USER|::|SEPARATE-LINE|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|COPY-ARRAY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|A| |COMMON-LISP|::|&AUX|
    (|COMMON-LISP-USER|::|DIM|
     (|COMMON-LISP|::|ARRAY-DIMENSIONS| |COMMON-LISP-USER|::|A|))
    (|COMMON-LISP-USER|::|B|
     (|COMMON-LISP|::|MAKE-ARRAY| |COMMON-LISP-USER|::|DIM|)))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|COPY-SUBARRAY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|A| |COMMON-LISP-USER|::|B|
    |COMMON-LISP-USER|::|INDICES| |COMMON-LISP-USER|::|DIM|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|ARRAY->VECTOR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|ARRAY|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|PLOT-ALIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|ALIST| |COMMON-LISP-USER|::|FILE|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|COPY-HASH-TABLE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|H1| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP-USER|::|COPY-FN| #'|COMMON-LISP|::|IDENTITY|))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|HASH-TABLE->LIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP-USER|::|TABLE|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|HPRINT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|H| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|COMPOSE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|F| |COMMON-LISP-USER|::|G|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|THE-BIGGEST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|FN| |COMMON-LISP-USER|::|L|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|THE-BIGGEST-RANDOM-TIE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|FN| |COMMON-LISP-USER|::|L|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|THE-BIGGEST-THAT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|FN| |COMMON-LISP-USER|::|P| |COMMON-LISP-USER|::|L|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|THE-SMALLEST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|FN| |COMMON-LISP-USER|::|L|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|THE-SMALLEST-RANDOM-TIE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|FN| |COMMON-LISP-USER|::|L|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|THE-SMALLEST-THAT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|FN| |COMMON-LISP-USER|::|P| |COMMON-LISP-USER|::|L|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |COMMON-LISP-USER|::|*DEBUGGING*|))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|DPRINT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP-USER|::|ARGS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|COMMON-LISP-USER|::|DEFTEST|)
(|SYSTEM|::|%PUTD| '|COMMON-LISP-USER|::|DEFTEST|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |COMMON-LISP-USER|::|DEFTEST|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Define a set of test examples.  Each example is of the form (exp test)\n
  or (exp).  Evaluate exp and see if the result passes the test. Within the\n
  test, the result is bound to *.  The example ((f 2))) has no test to\n
  fail, so it alweays passes the test.  But ((+ 2 2) (= * 3)) has the test\n
  (= * 3), which fails because * will be bound to the result 4, so the test\n
  fails.  Call (TEST name) to count how many tests are failed within the\n
  named test.  NAME is the name of an aima-system."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP-USER|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|COMMON-LISP-USER|::|EXAMPLES| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |COMMON-LISP-USER|::|DEFTEST|
       `(|COMMON-LISP-USER|::|ADD-TEST| ',|COMMON-LISP-USER|::|NAME|
         ',|COMMON-LISP-USER|::|EXAMPLES|))))))
  '(|COMMON-LISP-USER|::|NAME| |COMMON-LISP|::|&REST|
    |COMMON-LISP-USER|::|EXAMPLES|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|ADD-TEST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|NAME| |COMMON-LISP-USER|::|EXAMPLES|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|TEST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP-USER|::|NAME| '|COMMON-LISP-USER|::|ALL|)
    (|COMMON-LISP-USER|::|PRINT?| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP-USER|::|TEST-EXAMPLE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP-USER|::|EXAMPLE| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP-USER|::|PRINT?| |COMMON-LISP|::|T|))))
