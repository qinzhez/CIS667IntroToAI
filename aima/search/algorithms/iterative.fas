(|SYSTEM|::|VERSION| '(20080430.))
#0Y_ #0Y |CHARSET|::|UTF-8|
#Y(#:|1 24 (DEFUN HILL-CLIMBING-SEARCH (PROBLEM &OPTIONAL #) ...)-1|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|HILL-CLIMBING-SEARCH|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|HILL-CLIMBING-SEARCH|
       #63Y(00 00 00 00 01 00 01 00 26 08 3B 01 03 9A 00 01 AE 6F 01 63 1B 0F
            99 03 AD 30 04 F9 93 00 17 1B 0E 9E FA 16 01 AD B1 70 02 92 00 6A
            93 00 07 B0 AF AF 36 02 1D 6B B1 AF 70 05 AF 40 02 19 06)
       (|COMMON-LISP-USER|::|MINIMUM-OR-FLAT|
        |COMMON-LISP-USER|::|CREATE-START-NODE| |COMMON-LISP-USER|::|EXPAND|
        |COMMON-LISP-USER|::|NODE-H-COST|
        |COMMON-LISP-USER|::|THE-SMALLEST-RANDOM-TIE|
        |COMMON-LISP-USER|::|GOAL-TEST|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|PROBLEM| |COMMON-LISP|::|&OPTIONAL|
        (|COMMON-LISP-USER|::|STOPPING-CRITERION|
         #'|COMMON-LISP-USER|::|MINIMUM-OR-FLAT|))
       "Search by picking the best successor according to heuristic h.\n
  Stops according to stopping-criterion."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|26 49 (DEFUN SIMULATED-ANNEALING-SEARCH (PROBLEM &OPTIONAL #) ...)-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|SIMULATED-ANNEALING-SEARCH|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|SIMULATED-ANNEALING-SEARCH|
       #129Y(00 00 00 00 01 00 01 00 26 08 3B 01 03 2E 00 F9 AE 6F 01 AC B0 70
             02 AD 01 03 DD 6B 04 1B 80 57 B6 B2 70 05 B2 40 02 19 0B B5 AE 36
             01 FB 14 8E AC 6E 93 06 6B E0 B4 E1 72 43 E0 B3 E1 72 43 91 01 31
             02 A4 FD B2 2F 08 FC E0 B1 E1 72 43 E0 B5 E1 72 43 82 01 38 02 14
             8E AE 13 E3 38 01 72 F7 AF 73 00 38 B1 73 01 3A 72 B4 91 01 31 07
             A1 FF 14 B7 30 02 FE 85 01 AD AD 91 01 32 FF AB 00 19 0B)
       (|COMMON-LISP-USER|::|MAKE-EXP-SCHEDULE|
        |COMMON-LISP-USER|::|CREATE-START-NODE| |COMMON-LISP-USER|::|EXPAND| 1.
        |COMMON-LISP-USER|::|INFINITY| |COMMON-LISP-USER|::|GOAL-TEST|
        |COMMON-LISP-USER|::|NODE| 8. |COMMON-LISP-USER|::|RANDOM-ELEMENT|
        1.0f0)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|PROBLEM| |COMMON-LISP|::|&OPTIONAL|
        (|COMMON-LISP-USER|::|SCHEDULE|
         (|COMMON-LISP-USER|::|MAKE-EXP-SCHEDULE|)))
       "Like hill-climbing-search, except that we pick a next node randomly;\n
  if it is better, or if the badness of the next node is small and the\n
  'temperature' is large, then we accpet it, otherwise we ignore it.\n
  We halt when the temperature, TEMP, hits zero [p 113]."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|51 63 (DEFUN RANDOM-RESTART-SEARCH (PROBLEM-FN &OPTIONAL #) ...)-3|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|RANDOM-RESTART-SEARCH|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|RANDOM-RESTART-SEARCH|
       #60Y(00 00 00 00 01 00 01 00 26 08 3B 01 02 C5 F9 63 DB 1B 1E B0 76 00
            2F 02 42 02 93 03 0E DD AD DE 72 43 DD B1 DE 72 43 91 01 31 02 9D
            FB 16 02 85 00 AC B0 91 01 32 5C 16 01 15 19 03)
       (10. 1. |COMMON-LISP-USER|::|HILL-CLIMBING-SEARCH|
        |COMMON-LISP-USER|::|NODE| 8.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|PROBLEM-FN| |COMMON-LISP|::|&OPTIONAL|
        (|COMMON-LISP-USER|::|N| 10.))
       "Random-restart hill-climbing repeatedly calls hill-climbing-search.\n
  PROBLEM-FN should return a problem with a random initial state.\n
  We look at N different initial states, and keep the best solution found."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|65 67 (DEFUN HILL-CLIMBING-UNTIL-FLAT-N-TIMES-SEARCH (PROBLEM &OPTIONAL #) ...)-4|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|HILL-CLIMBING-UNTIL-FLAT-N-TIMES-SEARCH|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|HILL-CLIMBING-UNTIL-FLAT-N-TIMES-SEARCH|
       #23Y(00 00 00 00 01 00 01 00 26 08 3B 01 02 C5 F9 AE AE 6F 01 30 02 19
            03)
       (4. |COMMON-LISP-USER|::|MINIMUM-OR-FLAT-N-TIMES|
        |COMMON-LISP-USER|::|HILL-CLIMBING-SEARCH|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|PROBLEM| |COMMON-LISP|::|&OPTIONAL|
        (|COMMON-LISP-USER|::|N| 4.))
       "Do hill climbing, but stop after no improvement N times in a row." 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|69 73 (DEFUN LOCAL-MINIMUM (CURRENT NEXT) ...)-5|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|LOCAL-MINIMUM| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|LOCAL-MINIMUM|
       #25Y(00 00 00 00 02 00 00 00 26 03 DA AE DB 72 43 DA B0 DB 72 43 33 01
            32 19 03)
       (|COMMON-LISP-USER|::|NODE| 8.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|COMMON-LISP-USER|::|CURRENT| |COMMON-LISP-USER|::|NEXT|)
       "Stop when the next state is worse than the current." 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|75 77 (DEFUN MINIMUM-OR-FLAT (CURRENT NEXT) ...)-6|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|MINIMUM-OR-FLAT| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|MINIMUM-OR-FLAT|
       #25Y(00 00 00 00 02 00 00 00 26 03 DA AE DB 72 43 DA B0 DB 72 43 33 01
            34 19 03)
       (|COMMON-LISP-USER|::|NODE| 8.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|COMMON-LISP-USER|::|CURRENT| |COMMON-LISP-USER|::|NEXT|)
       "Stop when the next state is no better than the current." 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|79 86 (DEFUN MINIMUM-OR-FLAT-N-TIMES (N) ...)-7|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|MINIMUM-OR-FLAT-N-TIMES|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|MINIMUM-OR-FLAT-N-TIMES|
       #30Y(00 00 00 00 01 00 00 00 26 02 00 2B 01 7F 02 00 00 9D 2B 01 C5 0B
            00 00 AC 2C 01 01 19 04)
       (0.
        #Y(|COMMON-LISP-USER|::|MINIMUM-OR-FLAT-N-TIMES-1|
           #49Y(00 00 00 00 02 00 00 00 26 03 DB AE DC 72 43 DB B0 DC 72 43 90
                01 31 12 69 00 01 32 B1 0C 00 01 14 69 01 01 33 01 34 3F 19 03
                C8 0C 00 01 00 19 03)
           (|COMMON-LISP|::|NIL| |COMMON-LISP-USER|::|NODE| 8. 0.)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|COMMON-LISP-USER|::|CURRENT| |COMMON-LISP-USER|::|NEXT|)
           |COMMON-LISP|::|NIL| 1))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|COMMON-LISP-USER|::|N|)
       "Return a function that stops when no improvement is made N times in a row."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|88 90 (DEFUN CSP-TERMINATION (CURRENT NEXT) ...)-8|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|CSP-TERMINATION| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|CSP-TERMINATION|
       #19Y(00 00 00 00 02 00 00 00 26 03 DA AF DB 72 43 2F 02 19 03)
       (|COMMON-LISP-USER|::|NODE| 1. |COMMON-LISP-USER|::|CSP-GOALP|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|CURRENT| |COMMON-LISP-USER|::|NEXT|)
       |COMMON-LISP|::|NIL| 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|92 96 (DEFUN MAKE-EXP-SCHEDULE (&KEY # # ...) ...)-9|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|MAKE-EXP-SCHEDULE| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|MAKE-EXP-SCHEDULE|
       #44Y(00 00 00 00 00 00 00 00 A6 1B 03 00 00 00 00 2B 03 3B 04 01 C8 0B
            00 00 3B 03 01 C9 0B 00 01 3B 02 01 CA 0B 00 02 AC 2C 06 01 19 05)
       (:|K| :|LAMBDA| :|LIMIT| 20. 0.005f0 100.
        #Y(|COMMON-LISP-USER|::|MAKE-EXP-SCHEDULE-1|
           #41Y(00 00 00 00 01 00 00 00 26 02 AD 69 00 03 90 01 31 03 C6 19 02
                69 00 01 69 00 02 AF 73 02 39 73 00 38 72 B4 33 02 39 19 02)
           (|COMMON-LISP|::|NIL| 0.)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
           (|COMMON-LISP|::|TIME|) |COMMON-LISP|::|NIL| 1))
       (|COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|COMMON-LISP|::|&KEY| (|COMMON-LISP-USER|::|K| 20.)
        (|COMMON-LISP|::|LAMBDA| 0.005f0) (|COMMON-LISP-USER|::|LIMIT| 100.))
       "Return an exponential schedule function with time limit." 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
