(|SYSTEM|::|VERSION| '(20080430.))
#0Y_ #0Y |CHARSET|::|UTF-8|
#Y(#:|1 11 (DEFUN ELIMINATE-RETURNS (NODES) ...)-1|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|ELIMINATE-RETURNS| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|ELIMINATE-RETURNS|
       #19Y(00 00 00 00 01 00 00 00 26 02 99 00 AE 38 05 32 6A 19 02)
       (|COMMON-LISP-USER|::|RETURN-NODE?|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|NODES|)
       "Get rid of nodes that return to the state they just came from,\n
  i.e., where the last two actions just undo each other."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|13 15 (DEFUN ELIMINATE-CYCLES (NODES) ...)-2|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|ELIMINATE-CYCLES| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|ELIMINATE-CYCLES|
       #19Y(00 00 00 00 01 00 00 00 26 02 99 00 AE 38 05 32 6A 19 02)
       (|COMMON-LISP-USER|::|LOOPING-NODE?|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|NODES|)
       "Get rid of nodes that end in a state that has appeared before in the path."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|17 25 (DEFUN ELIMINATE-ALL-DUPLICATES (NODES NODE-TABLE) ...)-3|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|ELIMINATE-ALL-DUPLICATES|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|ELIMINATE-ALL-DUPLICATES|
       #51Y(00 00 00 00 02 00 00 00 26 03 63 AF 63 1B 1B 87 01 00 DA AD DB 72
            43 AC B2 38 01 8C 6E 03 AD 84 03 AC B2 AF 31 6F 16 01 83 01 AD 8D
            9F 61 16 02 15 19 03)
       (|COMMON-LISP-USER|::|NODE| 1.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|NODES| |COMMON-LISP-USER|::|NODE-TABLE|)
       "Get rid of all nodes that have been seen before in any path." 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|27 38 (DEFUN NO-CYCLES-DEPTH-FIRST-SEARCH (PROBLEM) ...)-4|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|NO-CYCLES-DEPTH-FIRST-SEARCH|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|NO-CYCLES-DEPTH-FIRST-SEARCH|
       #16Y(00 00 00 00 01 00 00 00 26 02 AD DA 30 01 19 02)
       (#Y(|COMMON-LISP-USER|::|NO-CYCLES-DEPTH-FIRST-SEARCH-1|
           #18Y(00 00 00 00 02 00 00 00 26 03 AE AE 6F 00 30 01 19 03)
           (|COMMON-LISP-USER|::|ELIMINATE-CYCLES|
            |COMMON-LISP-USER|::|ENQUEUE-AT-FRONT|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|COMMON-LISP-USER|::|OLD-Q| |COMMON-LISP-USER|::|NODES|)
           |COMMON-LISP|::|NIL| 1)
        |COMMON-LISP-USER|::|GENERAL-SEARCH|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|PROBLEM|)
       "Do depth-first search, but eliminate paths with repeated states." 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|40 44 (DEFUN NO-RETURNS-BREADTH-FIRST-SEARCH (PROBLEM) ...)-5|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|NO-RETURNS-BREADTH-FIRST-SEARCH|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|NO-RETURNS-BREADTH-FIRST-SEARCH|
       #16Y(00 00 00 00 01 00 00 00 26 02 AD DA 30 01 19 02)
       (#Y(|COMMON-LISP-USER|::|NO-RETURNS-BREADTH-FIRST-SEARCH-1|
           #18Y(00 00 00 00 02 00 00 00 26 03 AE AE 6F 00 30 01 19 03)
           (|COMMON-LISP-USER|::|ELIMINATE-RETURNS|
            |COMMON-LISP-USER|::|ENQUEUE-AT-END|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|COMMON-LISP-USER|::|OLD-Q| |COMMON-LISP-USER|::|NODES|)
           |COMMON-LISP|::|NIL| 1)
        |COMMON-LISP-USER|::|GENERAL-SEARCH|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|PROBLEM|)
       "Do breadth-first search, but eliminate immediate returns to a prior state."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|46 52 (DEFUN NO-DUPLICATES-BREADTH-FIRST-SEARCH (PROBLEM) ...)-6|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|NO-DUPLICATES-BREADTH-FIRST-SEARCH|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|NO-DUPLICATES-BREADTH-FIRST-SEARCH|
       #31Y(00 00 00 00 01 00 00 00 26 02 00 2B 01 38 09 C5 FB 31 6D 0B 00 00
            AE AD 6D 01 01 30 02 19 03)
       (#.#'|COMMON-LISP|::|EQUAL|
        #Y(|COMMON-LISP-USER|::|NO-DUPLICATES-BREADTH-FIRST-SEARCH-1|
           #21Y(00 00 00 00 02 00 00 00 26 03 AE AE 69 00 01 70 01 30 02 19 03)
           (|COMMON-LISP|::|NIL| |COMMON-LISP-USER|::|ELIMINATE-ALL-DUPLICATES|
            |COMMON-LISP-USER|::|ENQUEUE-AT-END|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|COMMON-LISP-USER|::|OLD-Q| |COMMON-LISP-USER|::|NODES|)
           |COMMON-LISP|::|NIL| 1)
        |COMMON-LISP-USER|::|GENERAL-SEARCH|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|PROBLEM|)
       "Do breadth-first search, but eliminate all duplicate states." 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|54 57 (DEFUN A*-SEARCH (PROBLEM) ...)-7|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|A*-SEARCH| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|A*-SEARCH|
       #19Y(00 00 00 00 01 00 00 00 26 02 AD 99 00 6F 01 30 02 19 02)
       (|COMMON-LISP-USER|::|NODE-F-COST|
        |COMMON-LISP-USER|::|MAKE-ELIMINATING-QUEUING-FN|
        |COMMON-LISP-USER|::|GENERAL-SEARCH|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|PROBLEM|)
       "Search the nodes with the best f cost first.  If a node is ever reached by\n
  two different paths, keep only the better path."
       1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|59 80 (DEFUN MAKE-ELIMINATING-QUEUING-FN (EVAL-FN) ...)-8|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|MAKE-ELIMINATING-QUEUING-FN|
    |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|MAKE-ELIMINATING-QUEUING-FN|
       #35Y(00 00 00 00 01 00 00 00 26 02 00 2B 01 7F 02 00 00 9D 2B 01 38 09
            C5 FB 31 6D 0B 00 00 AC 2C 01 01 19 04)
       (#.#'|COMMON-LISP|::|EQUAL|
        #Y(|COMMON-LISP-USER|::|MAKE-ELIMINATING-QUEUING-FN-1|
           #104Y(00 00 00 00 02 00 00 00 26 03 AE 63 AF 63 AD 8C 9F 80 47 87 01
                 00 DB AD DC 72 43 69 00 01 38 01 71 6E 93 00 30 69 01 01 AD 76
                 01 69 01 01 AF 76 01 90 01 33 19 DB AD DD 64 32 44 DB AE C7 14
                 72 43 69 00 01 AD AD B1 31 6F 16 02 AD 84 03 16 01 83 01 1B FF
                 B9 DB AE C7 1B 64 16 02 AC 81 64 00 69 01 01 2D 03 04 19 03)
           (|COMMON-LISP|::|NIL| |COMMON-LISP-USER|::|NODE| 1. 10.
            |COMMON-LISP-USER|::|ENQUEUE-BY-PRIORITY|)
           (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
           (|COMMON-LISP-USER|::|OLD-Q| |COMMON-LISP-USER|::|NODES|)
           |COMMON-LISP|::|NIL| 1))
       (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)
       (|COMMON-LISP-USER|::|EVAL-FN|) |COMMON-LISP|::|NIL| 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|83 92 (DEFUN LOOPING-NODE? (NODE &OPTIONAL #) ...)-9|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|LOOPING-NODE?| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|LOOPING-NODE?|
       #60Y(00 00 00 00 01 00 01 00 26 08 3B 01 03 0E 00 F9 DB AF DC 72 43 DD
            1B 18 02 19 05 DB B1 DD 72 43 DB AF DD 72 43 8E 14 70 DB AE DC 81
            43 01 85 00 AC B0 90 01 32 03 92 01 62 00 19 05)
       (|COMMON-LISP-USER|::|INFINITY| |COMMON-LISP-USER|::|NODE| 2. 1.)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|NODE| |COMMON-LISP|::|&OPTIONAL|
        (|COMMON-LISP-USER|::|DEPTH| |COMMON-LISP-USER|::|INFINITY|))
       "Did this node's state appear previously in the path?" 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
#Y(#:|94 96 (DEFUN RETURN-NODE? (NODE) ...)-10|
   #20Y(00 00 00 00 00 00 00 00 20 01 DA 2F 01 DA DC 32 9C C5 19 01)
   (|COMMON-LISP-USER|::|RETURN-NODE?| |SYSTEM|::|REMOVE-OLD-DEFINITIONS|
    #Y(|COMMON-LISP-USER|::|RETURN-NODE?|
       #16Y(00 00 00 00 01 00 00 00 26 02 AD DA 30 01 19 02)
       (2. |COMMON-LISP-USER|::|LOOPING-NODE?|)
       (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|)
       (|COMMON-LISP-USER|::|NODE|)
       "Is this a node that returns to the state it just came from?" 1))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|))
